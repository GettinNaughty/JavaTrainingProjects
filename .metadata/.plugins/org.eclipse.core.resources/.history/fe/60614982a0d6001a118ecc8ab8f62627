
public class SearchTree implements NodeList {
	private ListItem root = null;
	
	public SearchTree(ListItem root) {
		super();
		this.root = root;
	}

	@Override
	public ListItem getRoot() {
		// TODO Auto-generated method stub
		return this.root;
	}

	@Override
	public boolean addItem(ListItem newItem) {
		if(this.root == null) {
			this.root = newItem;
			return true;
		}
		ListItem currentItem = this.root;
		while(currentItem != null) {
			int comparison = currentItem.compareTo(newItem);
			if(comparison<0) {
				if(currentItem.next()!= null) {
					currentItem = currentItem.next();
				}
				else {
					currentItem.setNext(newItem);
					return true;
				}
			}
			else if(comparison>0) {
				if(currentItem.previous() != null) {
					currentItem = currentItem.previous();
					
				}
				else {
					currentItem.setPrevious(newItem);
				}
				return true;
			}
			else {
				System.out.println(newItem.getValue() + " is already present, not added.");
				return false;
			}
		}
		return false;
		
	}

	@Override
	public boolean removeItem(ListItem item) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void transverse(ListItem root) {
		// TODO Auto-generated method stub
		if(root!= null) {
			transverse(root.previous());
			System.out.println(root.getValue());
			transverse(root.next());
		}
	}

}
